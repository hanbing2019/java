<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="userMapper">
<resultMap type="user" id="usermap">
		<id column="u_id" property="id"/>
		<result column="u_name" property="name"/>
		<result column="u_pwd" property="pwd"/>
	</resultMap>
<resultMap type="tinfo" id="tiMap">
  <id column="t_id" property="id"/>
  <result column="dateStr" property="dateStr" typeHandler="mybatis.handler.MyHandler"/>
  <result column="describ" property="describ" jdbcType="VARCHAR" javaType="String" />
</resultMap>
<resultMap type="minfo" id="mMap">
<id column="id" property="id"/>
<result column="n" property="n"/>
<association property="tf" javaType="tinfo"  select="findByTid" column="id" />
<collection property="users" ofType="user" select="findByUserid" column="id" />
</resultMap>
<select id="selectTestInfo" resultMap="tiMap">
select t_id, dateStr,describ from test_info
</select>
	
<!-- <select -->
 <!-- id="selectPerson"           命名空间唯一标示符 -->
  <!-- parameterType="int"        传入参数的权限的名或者别名 -->
 <!-- parameterMap="deprecated"   使用内联参数映射和 parameterType 属性 -->
 <!-- resultType="hashmap"         返回的期望类型的类的完全限定名或别名 如果是集合情形，那应该是集合可以包含的类型，而不能是集合本身。使用 resultType 或 resultMap，但不能同时使用 -->
  <!--resultMap="userAndRoleResultMap"  外部 resultMap 的命名引用 -->
 <!-- flushCache="false"          将其设置为 true，任何时候只要语句被调用，都会导致本地缓存和二级缓存都会被清空，默认值：false。 -->
  <!--useCache="true"             将其设置为 true，将会导致本条语句的结果被二级缓存，默认值：对 select 元素为 true-->
 <!-- timeout="10000"             这个设置是在抛出异常之前，驱动程序等待数据库返回请求结果的秒数。默认值为 unset（依赖驱动）。 -->
 <!-- fetchSize="256"             这是尝试影响驱动程序每次批量返回的结果行数和这个设置值相等。默认值为 unset（依赖驱动）。 -->
 <!-- statementType="PREPARED"    STATEMENT，PREPARED 或 CALLABLE 的一个。这会让 MyBatis 分别使用 Statement，PreparedStatement 或 CallableStatement，默认值：PREPARED。 -->
 <!--  resultSetType="FORWARD_ONLY"> </select> FORWARD_ONLY，SCROLL_SENSITIVE 或 SCROLL_INSENSITIVE 中的一个，默认值为 unset （依赖驱动）。 -->



<!-- <insert
  id="insertAuthor"
  parameterType="domain.blog.Author"
  flushCache="true"
  statementType="PREPARED"
  keyProperty=""  （仅对 insert 和 update 有用）唯一标记一个属性，MyBatis 会通过 getGeneratedKeys 的返回值或者通过 insert 语句的 selectKey 子元素设置它的键值，默认：unset。
                                                       如果希望得到多个生成的列，也可以是逗号分隔的属性名称列表。
  keyColumn="" （仅对 insert 和 update 有用）通过生成的键值设置表中的列名，这个设置仅在某些数据库（像 PostgreSQL）是必须的，当主键列不是表中的第一列的时候需要设置。如果希望得到多个生成的列，也可以是逗号分隔的属性名称列表
  useGeneratedKeys=""  （仅对 insert 和 update 有用）这会令 MyBatis 使用 JDBC 的 getGeneratedKeys 方法来取出由数据库内部生成的主键
                                                                    （比如：像 MySQL 和 SQL Server 这样的关系数据库管理系统的自动递增字段），默认值：false。
  timeout="20"> -->

<!-- <update
  id="updateAuthor"
  parameterType="domain.blog.Author"
  flushCache="true"
  statementType="PREPARED"
  timeout="20"> -->

<!-- <delete
  id="deleteAuthor"
  parameterType="domain.blog.Author"
  flushCache="true"
  statementType="PREPARED"
  timeout="20"> -->

<!-- 批量插入数据：使用foreach标签遍历list参数 -->
<!-- <insert id="insertAuthor" useGeneratedKeys="true"
     keyProperty="id">
     insert into Author (username, password, email, bio) values
     <foreach item="item" collection="list" separator=",">
     (#{item.username}, #{item.password}, #{item.email}, #{item.bio})
     </foreach>
     </insert> -->

<!-- 定义可以重复使用的sql代码  使用sql-->
<!-- <sql id="xx">重复使用的sql代码段</sql> -->
<!-- 使用<include refid="xx">引入sql代码段 -->

<!-- #{}格式的语法，对传入得参数进项特殊处理，结果是在出入值的两边加上引号,这样做更安全，更迅速，通常也是首选做法 -->
<!-- %{}格式的语法，不对参数进行预处理，直接在 SQL 语句中插入一个不改变的字符串。使用的情况比如 ORDER BY，手动设置需要排序的字段 -->

<!-- 
<resultMap id="detailedBlogResultMap" type="Blog">
  <constructor>
    <idArg column="blog_id" javaType="int"/>
  </constructor>
  <result property="title" column="blog_title"/>
  <association property="author" javaType="Author">
    <id property="id" column="author_id"/>
    <result property="favouriteSection" column="author_favourite_section"/>
  </association>
  <collection property="posts" ofType="Post">
    <id property="id" column="post_id"/>
    <result property="subject" column="post_subject"/>
    <discriminator javaType="int" column="draft">
      <case value="1" resultType="DraftPost"/>
    </discriminator>
  </collection>
</resultMap>

resultMap
constructor - 类在实例化时,用来注入结果到构造方法中
idArg - ID 参数;标记结果作为 ID 可以帮助提高整体效能
arg - 注入到构造方法的一个普通结果
id – 一个 ID 结果;标记结果作为 ID 可以帮助提高整体效能
result – 注入到字段或 JavaBean 属性的普通结果
association – 一个复杂的类型关联;许多结果将包成这种类型 
嵌入结果映射 – 结果映射自身的关联,或者参考一个
collection – 复杂类型的集
嵌入结果映射 – 结果映射自身的集,或者参考一个
discriminator – 使用结果值来决定使用哪个结果映射
case – 基于某些值的结果映射
嵌入结果映射 – 这种情形结果也映射它本身,因此可以包含很多相 同的元素,或者它可以参照一个外部的结果映射。 -->


<select id="selectPage1" resultMap="usermap">
select u_id,u_name,u_pwd from t_user
</select>

<select id="findByUserid" parameterType="int" resultMap="usermap">
select u_id,u_name,u_pwd from t_user where m_id=#{id}
</select>

<select id="findByTid" parameterType="int" resultMap="tiMap">
select dateStr,describ from test_info where m_id=#{id}
</select>
<select id="selectMaxInfo" resultMap="mMap">
select id,n from max_info
</select>
<!-- 动态sql  -->
<!-- if标签 -->
<!-- <select id="findActiveBlogWithTitleLike"
     resultType="Blog">
  SELECT * FROM BLOG 
  WHERE state = ‘ACTIVE’ 
  当没有传来值的时候 不拼接下面sql
  <if test="title != null">
    AND title like #{title}
  </if>
</select> -->
<!-- choose, when, otherwise标签相当于java的switch case语句 一个参数在多种情况下的生成不用的条件 -->
<!-- <select id="findActiveBlogLike"
     resultType="Blog">
  SELECT * FROM BLOG WHERE state = ‘ACTIVE’
  <choose>
    <when test="title != null">
      AND title like #{title}
    </when>
    <when test="author != null and author.name != null">
      AND author_name like #{author.name}
    </when>
    <otherwise>
      AND featured = 1
    </otherwise>
  </choose>
</select> -->

</mapper>